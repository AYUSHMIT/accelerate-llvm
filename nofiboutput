accelerate-llvm-ptx> test (suite: nofib-llvm-ptx, args: --num-threads=1)

nofib-llvm-ptx
  sharing
    simple:                   OK
    ordering:                 OK
    sort:                     OK (0.02s)
    blowup:                   OK
    bfs:                      OK
    same level
      1:                      OK
      2:                      OK
    empty top
      1:                      OK
      2:                      OK
    pipe:                     OK
    bound variables:          OK
    big tuple:                OK
    iteration
      simple:                 OK
      outside:                OK
      body and condition:     OK
      awhile:                 OK
      iterate:                OK
      nested:                 OK
      unused:                 OK
    nested data-parallelism
      mvm:                    FAIL (expected)
        src/Data/Array/Accelerate/Test/NoFib/Sharing.hs:70:
        
        *** Internal error in package accelerate ***
        *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
        
        inconsistent valuation at shared 'Exp' tree (sa=3360; env=[3362])
        
        Note that this error usually arises due to the presence of nested data
        parallelism; when a parallel computation attempts to initiate new parallel
        work _which depends on_ a scalar variable given by the first computation.
        
        For example, suppose we wish to sum the columns of a two-dimensional array.
        You might think to do this in the following (incorrect) way: by constructing
        a vector using 'generate' where at each index we 'slice' out the
        corresponding column of the matrix and 'sum' it:
        
        > sum_columns_ndp :: Num a => Acc (Matrix a) -> Acc (Vector a)
        > sum_columns_ndp mat =
        >   let I2 rows cols = shape mat
        >   in  generate (I1 cols)
        >                (\(I1 col) -> the $ sum (slice mat (lift (Z :. All :. col))))
        
        However, since both 'generate' and 'slice' are data-parallel operators, and
        moreover that 'slice' _depends on_ the argument 'col' given to it by the
        'generate' function, this operation requires nested parallelism and is thus
        not (at this time) permitted. The clue that this definition is invalid is
        that in order to create a program which will be accepted by the type checker,
        we had to use the function 'the' to retrieve the result of the parallel
        'sum', effectively concealing that this is a collective operation in order to
        match the type expected by 'generate'.
        
        To solve this particular example, we can make use of the fact that (most)
        collective operations in Accelerate are _rank polymorphic_. The 'sum'
        operation reduces along the innermost dimension of an array of arbitrary
        rank, reducing the dimensionality of the array by one. To reduce the array
        column-wise then, we first need to simply 'transpose' the array:
        
        > sum_columns :: Num a => Acc (Matrix a) -> Acc (Vector a)
        > sum_columns = sum . transpose
        
        If you feel like this is not the cause of your error, or you would like some
        advice locating the problem and perhaps with a workaround, feel free to
        submit an issue at the above URL.
        
        
        CallStack (from HasCallStack):
          internalError: Data.Array.Accelerate.Trafo.Sharing:702:56
          cvt: Data.Array.Accelerate.Trafo.Sharing:760:48
          cvt: Data.Array.Accelerate.Trafo.Sharing:762:55
          cvt: Data.Array.Accelerate.Trafo.Sharing:762:46
          cvt: Data.Array.Accelerate.Trafo.Sharing:694:69
          convertSharingExp: Data.Array.Accelerate.Trafo.Sharing:909:25
          convertSharingFun1: Data.Array.Accelerate.Trafo.Sharing:298:17
          convertSharingAcc: Data.Array.Accelerate.Trafo.Sharing:292:16
          convertSharingAcc: Data.Array.Accelerate.Trafo.Sharing:292:16
          convertSharingAcc: Data.Array.Accelerate.Trafo.Sharing:285:13
          convertSharingAcc: Data.Array.Accelerate.Trafo.Sharing:282:14
          convertSharingAcc: Data.Array.Accelerate.Trafo.Sharing:243:3
          convertOpenAcc: Data.Array.Accelerate.Trafo.Sharing:161:35
          convertAccWith: Data.Array.Accelerate.Trafo.Sharing:158:14
          convertAcc: Data.Array.Accelerate.Test.NoFib.Sharing:69:19(expected failure)
  prelude
    map
      Int64
        DIM0
          neg:                OK (0.12s)
              ✓ neg passed 100 tests.
          abs:                FAIL (0.03s)
              ✗ abs failed at src/Data/Array/Accelerate/Test/NoFib/Prelude/Map.hs:167:3
                after 1 test.
              
                ━━━ Exception (ErrorCall) ━━━
                
                *** Internal error in package accelerate ***
                *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
                
                ptxas - -o /home/dpvanbalen/.cache/accelerate/accelerate-llvm-1.3.0.0/accelerate-llvm-ptx-1.3.0.0/llvm-hs-9.0.1/nvptx64-nvidia-cuda/sm75/rel/morpb97f7ee1b38234ec8f233c8400ff6512f102d4251ddcf4a4d2fad6f35dd2ccc4.sass -arch=sm_75 (exit 255)
                ptxas fatal   : Unresolved extern function 'llabs'
                
                
                CallStack (from HasCallStack):
                  internalError: Data.Array.Accelerate.LLVM.PTX.Compile:185:24
                  compileCUBIN: Data.Array.Accelerate.LLVM.PTX.Compile:123:20
                  compile: Data.Array.Accelerate.LLVM.PTX.Compile:88:22
              
                This failure can be reproduced by running:
                > recheck (Size 0) (Seed 7190669494402908063 14169010261592922467) abs
              
            Use '--hedgehog-replay "Size 0 Seed 7190669494402908063 14169010261592922467"' to reproduce.
          signum:             OK (0.05s)
              ✓ signum passed 100 tests.
          complement:         OK (0.05s)
              ✓ complement passed 100 tests.
          popCount:           OK (0.05s)
              ✓ popCount passed 100 tests.
          countLeadingZeros:  OK (0.05s)
              ✓ countLeadingZeros passed 100 tests.
          countTrailingZeros: OK (0.05s)
              ✓ countTrailingZeros passed 100 tests.
          fromIntegral:       OK (0.05s)
              ✓ fromIntegral passed 100 tests.
        DIM1
          neg:                OK (0.10s)
              ✓ neg passed 100 tests.
          abs:                FAIL (0.03s)
              ✗ abs failed at src/Data/Array/Accelerate/Test/NoFib/Prelude/Map.hs:167:3
                after 1 test.
              
                ━━━ Exception (ErrorCall) ━━━
                
                *** Internal error in package accelerate ***
                *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
                
                ptxas - -o /home/dpvanbalen/.cache/accelerate/accelerate-llvm-1.3.0.0/accelerate-llvm-ptx-1.3.0.0/llvm-hs-9.0.1/nvptx64-nvidia-cuda/sm75/rel/morp8127750ab4a210bbdc50935d802acf5c67d3e3a1f602a599f823270870336a06.sass -arch=sm_75 (exit 255)
                ptxas fatal   : Unresolved extern function 'llabs'
                
                
                CallStack (from HasCallStack):
                  internalError: Data.Array.Accelerate.LLVM.PTX.Compile:185:24
                  compileCUBIN: Data.Array.Accelerate.LLVM.PTX.Compile:123:20
                  compile: Data.Array.Accelerate.LLVM.PTX.Compile:88:22
              
                This failure can be reproduced by running:
                > recheck (Size 0) (Seed 8742983300130829189 14227818390680044687) abs
              
            Use '--hedgehog-replay "Size 0 Seed 8742983300130829189 14227818390680044687"' to reproduce.
          signum:             OK (0.10s)
              ✓ signum passed 100 tests.
          complement:         OK (0.10s)
              ✓ complement passed 100 tests.
          popCount:           OK (0.11s)
              ✓ popCount passed 100 tests.
          countLeadingZeros:  OK (0.10s)
              ✓ countLeadingZeros passed 100 tests.
          countTrailingZeros: OK (0.11s)
              ✓ countTrailingZeros passed 100 tests.
          fromIntegral:       OK (0.11s)
              ✓ fromIntegral passed 100 tests.
        DIM2
          neg:                OK (0.18s)
              ✓ neg passed 100 tests.
          abs:                FAIL (0.03s)
              ✗ abs failed at src/Data/Array/Accelerate/Test/NoFib/Prelude/Map.hs:167:3
                after 1 test.
              
                ━━━ Exception (ErrorCall) ━━━
                
                *** Internal error in package accelerate ***
                *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
                
                ptxas - -o /home/dpvanbalen/.cache/accelerate/accelerate-llvm-1.3.0.0/accelerate-llvm-ptx-1.3.0.0/llvm-hs-9.0.1/nvptx64-nvidia-cuda/sm75/rel/morpc00152f0ae6c8771fe5ef618540e7878a8e8c0b5f756cc8c2dd022931e05d768.sass -arch=sm_75 (exit 255)
                ptxas fatal   : Unresolved extern function 'llabs'
                
                
                CallStack (from HasCallStack):
                  internalError: Data.Array.Accelerate.LLVM.PTX.Compile:185:24
                  compileCUBIN: Data.Array.Accelerate.LLVM.PTX.Compile:123:20
                  compile: Data.Array.Accelerate.LLVM.PTX.Compile:88:22
              
                This failure can be reproduced by running:
                > recheck (Size 0) (Seed 7054674401113353933 11516577743892164983) abs
              
            Use '--hedgehog-replay "Size 0 Seed 7054674401113353933 11516577743892164983"' to reproduce.
          signum:             OK (0.22s)
              ✓ signum passed 100 tests.
          complement:         OK (0.24s)
              ✓ complement passed 100 tests.
          popCount:           OK (0.21s)
              ✓ popCount passed 100 tests.
          countLeadingZeros:  OK (0.19s)
              ✓ countLeadingZeros passed 100 tests.
          countTrailingZeros: OK (0.18s)
              ✓ countTrailingZeros passed 100 tests.
          fromIntegral:       OK (0.18s)
              ✓ fromIntegral passed 100 tests.
      Double
        DIM0
          neg:                OK (0.05s)
              ✓ neg passed 100 tests.
          abs:                OK (0.50s)
              ✓ abs passed 100 tests.
          signum:             OK (0.01s)
              ✓ signum passed 100 tests.
          recip:              OK (0.05s)
              ✓ recip passed 100 tests.
          sin:                OK (0.28s)
              ✓ sin passed 100 tests.
          cos:                OK (0.26s)
              ✓ cos passed 100 tests.
          tan:                OK (0.25s)
              ✓ tan passed 100 tests.
          asin:               OK (0.26s)
              ✓ asin passed 100 tests.
          acos:               OK (0.26s)
              ✓ acos passed 100 tests.
          atan:               OK (0.26s)
              ✓ atan passed 100 tests.
          asinh:              OK (0.27s)
              ✓ asinh passed 100 tests.
          acosh:              OK (0.24s)
              ✓ acosh passed 100 tests.
          atanh:              OK (0.26s)
              ✓ atanh passed 100 tests.
          exp:                OK (0.26s)
              ✓ exp passed 100 tests.
          sqrt:               OK (0.26s)
              ✓ sqrt passed 100 tests.
          log:                OK (0.24s)
              ✓ log passed 100 tests.
          truncate:           OK (0.05s)
              ✓ truncate passed 100 tests.
          round:              OK (0.25s)
              ✓ round passed 100 tests.
          floor:              OK (0.25s)
              ✓ floor passed 100 tests.
          ceiling:            OK (0.26s)
              ✓ ceiling passed 100 tests.
        DIM1
          neg:                OK (0.14s)
              ✓ neg passed 100 tests.
          abs:                OK (0.32s)
              ✓ abs passed 100 tests.
          signum:             OK (0.11s)
              ✓ signum passed 100 tests.
          recip:              OK (0.15s)
              ✓ recip passed 100 tests.
          sin:                OK (0.37s)
              ✓ sin passed 100 tests.
          cos:                OK (0.37s)
              ✓ cos passed 100 tests.
          tan:                OK (0.36s)
              ✓ tan passed 100 tests.
          asin:               OK (0.34s)
              ✓ asin passed 100 tests.
          acos:               OK (0.35s)
              ✓ acos passed 100 tests.
          atan:               OK (0.35s)
              ✓ atan passed 100 tests.
          asinh:              OK (0.34s)
              ✓ asinh passed 100 tests.
          acosh:              OK (0.37s)
              ✓ acosh passed 100 tests.
          atanh:              OK (0.35s)
              ✓ atanh passed 100 tests.
          exp:                OK (0.35s)
              ✓ exp passed 100 tests.
          sqrt:               OK (0.34s)
              ✓ sqrt passed 100 tests.
          log:                OK (0.34s)
              ✓ log passed 100 tests.
          truncate:           OK (0.14s)
              ✓ truncate passed 100 tests.
          round:              OK (0.34s)
              ✓ round passed 100 tests.
          floor:              OK (0.35s)
              ✓ floor passed 100 tests.
          ceiling:            OK (0.35s)
              ✓ ceiling passed 100 tests.
        DIM2
          neg:                OK (0.26s)
              ✓ neg passed 100 tests.
          abs:                OK (0.46s)
              ✓ abs passed 100 tests.
          signum:             OK (0.19s)
              ✓ signum passed 100 tests.
          recip:              OK (0.23s)
              ✓ recip passed 100 tests.
          sin:                OK (0.41s)
              ✓ sin passed 100 tests.
          cos:                OK (0.47s)
              ✓ cos passed 100 tests.
          tan:                OK (0.49s)
              ✓ tan passed 100 tests.
          asin:               OK (0.49s)
              ✓ asin passed 100 tests.
          acos:               OK (0.42s)
              ✓ acos passed 100 tests.
          atan:               OK (0.43s)
              ✓ atan passed 100 tests.
          asinh:              OK (0.42s)
              ✓ asinh passed 100 tests.
          acosh:              OK (0.50s)
              ✓ acosh passed 100 tests.
          atanh:              OK (0.48s)
              ✓ atanh passed 100 tests.
          exp:                OK (0.44s)
              ✓ exp passed 100 tests.
          sqrt:               OK (0.44s)
              ✓ sqrt passed 100 tests.
          log:                OK (0.55s)
              ✓ log passed 100 tests.
          truncate:           OK (0.28s)
              ✓ truncate passed 100 tests.
          round:              OK (0.47s)
              ✓ round passed 100 tests.
          floor:              OK (0.42s)
              ✓ floor passed 100 tests.
          ceiling:            OK (0.46s)
              ✓ ceiling passed 100 tests.
    zipWith
      Int64
        DIM0
          (+):                OK (0.05s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.05s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.05s)
              ✓ (*) passed 100 tests.
          quot:               OK (0.06s)
              ✓ quot passed 100 tests.
          rem:                OK (0.06s)
              ✓ rem passed 100 tests.
          quotRem:            OK (0.06s)
              ✓ quotRem passed 100 tests.
          div:                OK (0.06s)
              ✓ div passed 100 tests.
          mod:                OK (0.06s)
              ✓ mod passed 100 tests.
          divMod:             OK (0.07s)
              ✓ divMod passed 100 tests.
          (.&.):              OK (0.05s)
              ✓ (.&.) passed 100 tests.
          (.|.):              OK (0.05s)
              ✓ (.|.) passed 100 tests.
          xor:                OK (0.05s)
              ✓ xor passed 100 tests.
          shift:              OK (0.05s)
              ✓ shift passed 100 tests.
          shiftL:             OK (0.05s)
              ✓ shiftL passed 100 tests.
          shiftR:             OK (0.05s)
              ✓ shiftR passed 100 tests.
          rotate:             OK (0.06s)
              ✓ rotate passed 100 tests.
          rotateL:            OK (0.05s)
              ✓ rotateL passed 100 tests.
          rotateR:            OK (0.06s)
              ✓ rotateR passed 100 tests.
          (<):                OK (0.06s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.05s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.05s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.05s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.05s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.05s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.05s)
              ✓ min passed 100 tests.
          max:                OK (0.05s)
              ✓ max passed 100 tests.
        DIM1
          (+):                OK (0.18s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.18s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.16s)
              ✓ (*) passed 100 tests.
          quot:               OK (0.22s)
              ✓ quot passed 100 tests.
          rem:                OK (0.18s)
              ✓ rem passed 100 tests.
          quotRem:            OK (0.19s)
              ✓ quotRem passed 100 tests.
          div:                OK (0.19s)
              ✓ div passed 100 tests.
          mod:                OK (0.19s)
              ✓ mod passed 100 tests.
          divMod:             OK (0.19s)
              ✓ divMod passed 100 tests.
          (.&.):              OK (0.16s)
              ✓ (.&.) passed 100 tests.
          (.|.):              OK (0.16s)
              ✓ (.|.) passed 100 tests.
          xor:                OK (0.17s)
              ✓ xor passed 100 tests.
          shift:              OK (0.15s)
              ✓ shift passed 100 tests.
          shiftL:             OK (0.15s)
              ✓ shiftL passed 100 tests.
          shiftR:             OK (0.16s)
              ✓ shiftR passed 100 tests.
          rotate:             OK (0.16s)
              ✓ rotate passed 100 tests.
          rotateL:            OK (0.16s)
              ✓ rotateL passed 100 tests.
          rotateR:            OK (0.16s)
              ✓ rotateR passed 100 tests.
          (<):                OK (0.15s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.16s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.17s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.20s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.16s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.18s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.17s)
              ✓ min passed 100 tests.
          max:                OK (0.16s)
              ✓ max passed 100 tests.
        DIM2
          (+):                OK (0.31s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.29s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.33s)
              ✓ (*) passed 100 tests.
          quot:               OK (0.40s)
              ✓ quot passed 100 tests.
          rem:                OK (0.40s)
              ✓ rem passed 100 tests.
          quotRem:            OK (0.43s)
              ✓ quotRem passed 100 tests.
          div:                OK (0.36s)
              ✓ div passed 100 tests.
          mod:                OK (0.45s)
              ✓ mod passed 100 tests.
          divMod:             OK (0.41s)
              ✓ divMod passed 100 tests.
          (.&.):              OK (0.40s)
              ✓ (.&.) passed 100 tests.
          (.|.):              OK (0.32s)
              ✓ (.|.) passed 100 tests.
          xor:                OK (0.29s)
              ✓ xor passed 100 tests.
          shift:              OK (0.28s)
              ✓ shift passed 100 tests.
          shiftL:             OK (0.31s)
              ✓ shiftL passed 100 tests.
          shiftR:             OK (0.26s)
              ✓ shiftR passed 100 tests.
          rotate:             OK (0.27s)
              ✓ rotate passed 100 tests.
          rotateL:            OK (0.31s)
              ✓ rotateL passed 100 tests.
          rotateR:            OK (0.29s)
              ✓ rotateR passed 100 tests.
          (<):                OK (0.33s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.39s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.28s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.30s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.36s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.32s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.37s)
              ✓ min passed 100 tests.
          max:                OK (0.31s)
              ✓ max passed 100 tests.
      Double
        DIM0
          (+):                OK (0.05s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.05s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.05s)
              ✓ (*) passed 100 tests.
          (/):                OK (0.06s)
              ✓ (/) passed 100 tests.
          (**):               OK (0.27s)
              ✓ (**) passed 100 tests.
          atan2:              OK (0.24s)
              ✓ atan2 passed 100 tests.
          logBase:            OK (0.26s)
              ✓ logBase passed 100 tests.
          (<):                OK (0.05s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.05s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.06s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.06s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.06s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.05s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.26s)
              ✓ min passed 100 tests.
          max:                OK (0.26s)
              ✓ max passed 100 tests.
        DIM1
          (+):                OK (0.24s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.24s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.25s)
              ✓ (*) passed 100 tests.
          (/):                OK (0.27s)
              ✓ (/) passed 100 tests.
          (**):               OK (0.49s)
              ✓ (**) passed 100 tests.
          atan2:              OK (0.45s)
              ✓ atan2 passed 100 tests.
          logBase:            OK (0.46s)
              ✓ logBase passed 100 tests.
          (<):                OK (0.23s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.25s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.24s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.24s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.25s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.22s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.45s)
              ✓ min passed 100 tests.
          max:                OK (0.44s)
              ✓ max passed 100 tests.
        DIM2
          (+):                OK (0.54s)
              ✓ (+) passed 100 tests.
          (-):                OK (0.47s)
              ✓ (-) passed 100 tests.
          (*):                OK (0.55s)
              ✓ (*) passed 100 tests.
          (/):                OK (0.62s)
              ✓ (/) passed 100 tests.
          (**):               OK (0.75s)
              ✓ (**) passed 100 tests.
          atan2:              OK (0.66s)
              ✓ atan2 passed 100 tests.
          logBase:            OK (0.83s)
              ✓ logBase passed 100 tests.
          (<):                OK (0.39s)
              ✓ (<) passed 100 tests.
          (>):                OK (0.43s)
              ✓ (>) passed 100 tests.
          (<=):               OK (0.49s)
              ✓ (<=) passed 100 tests.
          (>=):               OK (0.45s)
              ✓ (>=) passed 100 tests.
          (==):               OK (0.47s)
              ✓ (==) passed 100 tests.
          (/=):               OK (0.49s)
              ✓ (/=) passed 100 tests.
          min:                OK (0.66s)
              ✓ min passed 100 tests.
          max:                OK (0.67s)
              ✓ max passed 100 tests.
    simd
      Int64
        extract
          V2:                 OK (0.26s)
              ✓ V2 passed 100 tests.
          V3:                 OK (0.33s)
              ✓ V3 passed 100 tests.
          V4:                 OK (0.48s)
              ✓ V4 passed 100 tests.
        inject
          V2:                 OK (0.17s)
              ✓ V2 passed 100 tests.
          V3:                 OK (0.23s)
              ✓ V3 passed 100 tests.
          V4:                 OK (0.32s)
              ✓ V4 passed 100 tests.
      Double
        extract
          V2:                 OK (0.28s)
              ✓ V2 passed 100 tests.
          V3:                 OK (0.46s)
              ✓ V3 passed 100 tests.
          V4:                 OK (0.55s)
              ✓ V4 passed 100 tests.
        inject
          V2:                 OK (0.26s)
              ✓ V2 passed 100 tests.
          V3:                 OK (0.31s)
              ✓ V3 passed 100 tests.
          V4:                 OK (0.43s)
              ✓ V4 passed 100 tests.
    fold
      Int64
        DIM1
          sum:                OK (0.19s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.07s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.41s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.18s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.19s)
              ✓ maximum passed 100 tests.
        DIM2
          sum:                OK (0.24s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.16s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.36s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.24s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.23s)
              ✓ maximum passed 100 tests.
        DIM3
          sum:                OK (0.32s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.33s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.49s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.45s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.45s)
              ✓ maximum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.22s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.09s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.67s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.43s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.41s)
              ✓ maximum passed 100 tests.
        DIM2
          sum:                OK (0.29s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.18s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.71s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.51s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.49s)
              ✓ maximum passed 100 tests.
        DIM3
          sum:                OK (0.50s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.50s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.94s)
              ✓ non-commutative passed 100 tests.
          minimum:            OK (0.73s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.68s)
              ✓ maximum passed 100 tests.
    foldSeg
      Int64
        DIM1
          sum:                OK (0.42s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.22s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (0.32s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.36s)
              ✓ maximum passed 100 tests.
        DIM2
          sum:                OK (2.57s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.46s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (2.82s)
              ✓ minimum passed 100 tests.
          maximum:            OK (2.18s)
              ✓ maximum passed 100 tests.
        DIM3
          sum:                OK (3.46s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.42s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (3.65s)
              ✓ minimum passed 100 tests.
          maximum:            OK (4.86s)
              ✓ maximum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.39s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.27s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (0.64s)
              ✓ minimum passed 100 tests.
          maximum:            OK (0.61s)
              ✓ maximum passed 100 tests.
        DIM2
          sum:                OK (3.02s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.06s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (2.82s)
              ✓ minimum passed 100 tests.
          maximum:            OK (2.84s)
              ✓ maximum passed 100 tests.
        DIM3
          sum:                OK (3.61s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.88s)
              ✓ non-neutral sum passed 100 tests.
          minimum:            OK (4.52s)
              ✓ minimum passed 100 tests.
          maximum:            OK (6.81s)
              ✓ maximum passed 100 tests.
    backpermute
      Int64
        DIM1
          take:               OK (0.11s)
              ✓ take passed 100 tests.
          drop:               OK (0.11s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.16s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.27s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.53s)
              ✓ gather->DIM3 passed 100 tests.
        DIM2
          take:               OK (0.22s)
              ✓ take passed 100 tests.
          drop:               OK (0.17s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.28s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.36s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.61s)
              ✓ gather->DIM3 passed 100 tests.
        DIM3
          take:               OK (0.66s)
              ✓ take passed 100 tests.
          drop:               OK (0.48s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.44s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.49s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.70s)
              ✓ gather->DIM3 passed 100 tests.
      Double
        DIM1
          take:               OK (0.14s)
              ✓ take passed 100 tests.
          drop:               OK (0.14s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.18s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.30s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.61s)
              ✓ gather->DIM3 passed 100 tests.
        DIM2
          take:               OK (0.25s)
              ✓ take passed 100 tests.
          drop:               OK (0.26s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.31s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.46s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.55s)
              ✓ gather->DIM3 passed 100 tests.
        DIM3
          take:               OK (0.56s)
              ✓ take passed 100 tests.
          drop:               OK (0.51s)
              ✓ drop passed 100 tests.
          gather->DIM1:       OK (0.66s)
              ✓ gather->DIM1 passed 100 tests.
          gather->DIM2:       OK (0.49s)
              ✓ gather->DIM2 passed 100 tests.
          gather->DIM3:       OK (0.84s)
              ✓ gather->DIM3 passed 100 tests.
    permute
      Int64
        DIM1
          scatter->DIM1:      OK (0.27s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.31s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (0.63s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.20s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (0.21s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.21s)
              ✓ accumulate->DIM3 passed 100 tests.
        DIM2
          scatter->DIM1:      OK (0.41s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.60s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (0.81s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.41s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (0.38s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.42s)
              ✓ accumulate->DIM3 passed 100 tests.
        DIM3
          scatter->DIM1:      OK (1.12s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.91s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (1.45s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.65s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (1.02s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.72s)
              ✓ accumulate->DIM3 passed 100 tests.
      Double
        DIM1
          scatter->DIM1:      OK (0.34s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.49s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (0.71s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.22s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (0.23s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.27s)
              ✓ accumulate->DIM3 passed 100 tests.
        DIM2
          scatter->DIM1:      OK (0.54s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.71s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (0.95s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.45s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (0.42s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.56s)
              ✓ accumulate->DIM3 passed 100 tests.
        DIM3
          scatter->DIM1:      OK (1.01s)
              ✓ scatter->DIM1 passed 100 tests.
          scatter->DIM2:      OK (0.98s)
              ✓ scatter->DIM2 passed 100 tests.
          scatter->DIM3:      OK (1.42s)
              ✓ scatter->DIM3 passed 100 tests.
          accumulate->DIM1:   OK (0.72s)
              ✓ accumulate->DIM1 passed 100 tests.
          accumulate->DIM2:   OK (1.00s)
              ✓ accumulate->DIM2 passed 100 tests.
          accumulate->DIM3:   OK (0.87s)
              ✓ accumulate->DIM3 passed 100 tests.
    scanl
      Int64
        DIM1
          sum:                OK (0.16s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.07s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.20s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.17s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.15s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.54s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.32s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.17s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.10s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.20s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.21s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.21s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.15s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.45s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.35s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.18s)
              ✓ non-commutative passed 100 tests.
    scanl1
      Int64
        DIM1
          sum:                OK (0.14s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.18s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.22s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.21s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.39s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.28s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.18s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.27s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.22s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.65s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.23s)
              ✓ non-commutative passed 100 tests.
    scanl'
      Int64
        DIM1
          sum:                OK (0.17s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.08s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.20s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.22s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.13s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.16s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.48s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.37s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.25s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.18s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.11s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.21s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.21s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.24s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.17s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.52s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.36s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.21s)
              ✓ non-commutative passed 100 tests.
    scanr
      Int64
        DIM1
          sum:                OK (0.16s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.07s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.24s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.12s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.15s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.35s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.32s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.18s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.17s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.10s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.31s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.25s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.15s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.46s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.46s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.17s)
              ✓ non-commutative passed 100 tests.
    scanr1
      Int64
        DIM1
          sum:                OK (0.14s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.23s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.19s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.53s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.23s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.17s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.18s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.31s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.21s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.71s)
              ✓ sum passed 100 tests.
          non-commutative:    OK (0.27s)
              ✓ non-commutative passed 100 tests.
    scanr'
      Int64
        DIM1
          sum:                OK (0.15s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.08s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.20s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.19s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.18s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.16s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.42s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.44s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.25s)
              ✓ non-commutative passed 100 tests.
      Double
        DIM1
          sum:                OK (0.17s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.11s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.20s)
              ✓ non-commutative passed 100 tests.
        DIM2
          sum:                OK (0.26s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.18s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.16s)
              ✓ non-commutative passed 100 tests.
        DIM3
          sum:                OK (0.69s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.33s)
              ✓ non-neutral sum passed 100 tests.
          non-commutative:    OK (0.17s)
              ✓ non-commutative passed 100 tests.
    scanlSeg
      Int64
        DIM1
          sum:                OK (0.84s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.29s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (2.36s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.06s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (3.76s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.54s)
              ✓ non-neutral sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.56s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.35s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (3.18s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.26s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (5.80s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.95s)
              ✓ non-neutral sum passed 100 tests.
    scanl1Seg
      Int64
        DIM1
          sum:                OK (0.37s)
              ✓ sum passed 100 tests.
        DIM2
          sum:                OK (2.94s)
              ✓ sum passed 100 tests.
        DIM3
          sum:                OK (4.11s)
              ✓ sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.44s)
              ✓ sum passed 100 tests.
        DIM2
          sum:                OK (3.03s)
              ✓ sum passed 100 tests.
        DIM3
          sum:                OK (4.47s)
              ✓ sum passed 100 tests.
    scanl'Seg
      Int64
        DIM1
          sum:                OK (0.63s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.32s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (2.08s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.23s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (5.60s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (4.86s)
              ✓ non-neutral sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.48s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.46s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (2.97s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.50s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (3.81s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (6.45s)
              ✓ non-neutral sum passed 100 tests.
    scanrSeg
      Int64
        DIM1
          sum:                OK (0.53s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.27s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (2.42s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (1.95s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (3.10s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.13s)
              ✓ non-neutral sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.52s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.37s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (3.26s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.43s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (4.35s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (4.82s)
              ✓ non-neutral sum passed 100 tests.
    scanr1Seg
      Int64
        DIM1
          sum:                OK (0.43s)
              ✓ sum passed 100 tests.
        DIM2
          sum:                OK (2.06s)
              ✓ sum passed 100 tests.
        DIM3
          sum:                OK (4.82s)
              ✓ sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.41s)
              ✓ sum passed 100 tests.
        DIM2
          sum:                OK (2.56s)
              ✓ sum passed 100 tests.
        DIM3
          sum:                OK (5.96s)
              ✓ sum passed 100 tests.
    scanr'Seg
      Int64
        DIM1
          sum:                OK (0.39s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.37s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (2.22s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (1.66s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (4.76s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (4.14s)
              ✓ non-neutral sum passed 100 tests.
      Double
        DIM1
          sum:                OK (0.47s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (0.38s)
              ✓ non-neutral sum passed 100 tests.
        DIM2
          sum:                OK (3.27s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (2.50s)
              ✓ non-neutral sum passed 100 tests.
        DIM3
          sum:                OK (5.58s)
              ✓ sum passed 100 tests.
          non-neutral sum:    OK (3.91s)
              ✓ non-neutral sum passed 100 tests.
    filter
      Int64
        DIM1
          even:               OK (0.27s)
              ✓ even passed 100 tests.
        DIM2
          even:               OK (0.31s)
              ✓ even passed 100 tests.
        DIM3
          even:               OK (0.34s)
              ✓ even passed 100 tests.
      Double
        DIM1
          positive:           OK (0.21s)
              ✓ positive passed 100 tests.
        DIM2
          positive:           OK (0.32s)
              ✓ positive passed 100 tests.
        DIM3
          positive:           OK (0.59s)
              ✓ positive passed 100 tests.
    stencil
      Int64
        DIM1
          stencil3:           OK (2.44s)
              ✓ stencil3 passed 100 tests.
          stencil5:           OK (3.53s)
              ✓ stencil5 passed 100 tests.
          stencil7:           OK (4.47s)
              ✓ stencil7 passed 100 tests.
          stencil9:           OK (4.99s)
              ✓ stencil9 passed 100 tests.
        DIM2
          stencil3x3:         OK (6.08s)
              ✓ stencil3x3 passed 100 tests.
          stencil5x5:         OK (9.19s)
              ✓ stencil5x5 passed 100 tests.
          stencil7x7:         OK (16.95s)
              ✓ stencil7x7 passed 100 tests.
          stencil9x9:         OK (21.14s)
              ✓ stencil9x9 passed 100 tests.
        DIM3
          stencil3x3x3:       OK (11.67s)
              ✓ stencil3x3x3 passed 100 tests.
      Double
        DIM1
          stencil3:           OK (1.91s)
              ✓ stencil3 passed 100 tests.
          stencil5:           OK (3.52s)
              ✓ stencil5 passed 100 tests.
          stencil7:           OK (4.44s)
              ✓ stencil7 passed 100 tests.
          stencil9:           OK (5.02s)
              ✓ stencil9 passed 100 tests.
        DIM2
          stencil3x3:         OK (6.32s)
              ✓ stencil3x3 passed 100 tests.
          stencil5x5:         OK (9.02s)
              ✓ stencil5x5 passed 100 tests.
          stencil7x7:         OK (17.11s)
              ✓ stencil7x7 passed 100 tests.
          stencil9x9:         OK (20.95s)
              ✓ stencil9x9 passed 100 tests.
        DIM3
          stencil3x3x3:       OK (12.28s)
              ✓ stencil3x3x3 passed 100 tests.
  imaginary
    sasum
      Int64:                  FAIL (0.07s)
          ✗ Int64 failed at src/Data/Array/Accelerate/Test/NoFib/Imaginary/SASUM.hs:69:3
            after 1 test.
          
            ━━━ Exception (ErrorCall) ━━━
            
            *** Internal error in package accelerate ***
            *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
            
            ptxas - -o /home/dpvanbalen/.cache/accelerate/accelerate-llvm-1.3.0.0/accelerate-llvm-ptx-1.3.0.0/llvm-hs-9.0.1/nvptx64-nvidia-cuda/sm75/rel/morp980756cb624ff884f2b9542fa5be480339ff495af9f078d2dd44b2b53125c30d.sass -arch=sm_75 (exit 255)
            ptxas fatal   : Unresolved extern function 'llabs'
            
            
            CallStack (from HasCallStack):
              internalError: Data.Array.Accelerate.LLVM.PTX.Compile:185:24
              compileCUBIN: Data.Array.Accelerate.LLVM.PTX.Compile:123:20
              compile: Data.Array.Accelerate.LLVM.PTX.Compile:88:22
          
            This failure can be reproduced by running:
            > recheck (Size 0) (Seed 18027682917129045921 5050487354153386295) Int64
          
        Use '--hedgehog-replay "Size 0 Seed 18027682917129045921 5050487354153386295"' to reproduce.
      Double:                 OK (2.16s)
          ✓ Double passed 100 tests.
    saxpy
      Int64:                  OK (3.49s)
          ✓ Int64 passed 100 tests.
      Double:                 OK (4.04s)
          ✓ Double passed 100 tests.
    dot product
      Int64:                  OK (3.29s)
          ✓ Int64 passed 100 tests.
      Double:                 OK (3.85s)
          ✓ Double passed 100 tests.
  spectral
    blackscholes
      Double:                 OK (5.61s)
          ✓ Double passed 100 tests.
    smvm
      Double:                 OK (2.13s)
          ✓ Double passed 100 tests.
    radixsort
      Int64
        ascending:            OK (2.37s)
            ✓ ascending passed 100 tests.
        descending:           OK (2.26s)
            ✓ descending passed 100 tests.
        key-value:            OK (2.72s)
            ✓ key-value passed 100 tests.
  issues
    93:                       OK (0.04s)
    102:                      OK (0.10s)
    114
      A:                      OK (0.12s)
      B:                      OK (0.08s)
    119
      A:                      OK (0.10s)
      B:                      OK
      C:                      OK (0.12s)
      D:                      OK
      E:                      OK (0.08s)
      F:                      OK (0.28s)
      G:                      OK (0.21s)
      H:                      OK (0.22s)
      I:                      OK (0.12s)
      J:                      OK (0.30s)
      K:                      OK (0.16s)
    123:                      OK (0.12s)
    137:                      FAIL
      Exception: 
      *** Internal error in package accelerate ***
      *** Please submit a bug report at https://github.com/AccelerateHS/accelerate/issues
      
      ptxas - -o /home/dpvanbalen/.cache/accelerate/accelerate-llvm-1.3.0.0/accelerate-llvm-ptx-1.3.0.0/llvm-hs-9.0.1/nvptx64-nvidia-cuda/sm75/rel/morpb5348fc923d18497fac39eb2b86f305d0926b4cb37271dbac387984ee5f1bcd5.sass -arch=sm_75 (exit 255)
      ptxas fatal   : Unresolved extern function 'llabs'
      
      
      CallStack (from HasCallStack):
        internalError: Data.Array.Accelerate.LLVM.PTX.Compile:185:24
        compileCUBIN: Data.Array.Accelerate.LLVM.PTX.Compile:123:20
        compile: Data.Array.Accelerate.LLVM.PTX.Compile:88:22
    168
      A:                      OK (0.04s)
      B:                      OK (0.03s)
      C:                      OK (0.04s)
    184
      A:                      OK (0.04s)
      B:                      OK
      C:                      OK
    185
      A:                      OK (0.04s)
      B:                      OK
      C:                      OK (0.04s)
      D:                      OK
      E:                      OK (0.04s)
      F:                      OK (0.04s)
    187
      A:                      OK (0.04s)
      B:                      OK (0.03s)
    228
      A:                      OK (0.20s)
      B:                      OK (0.19s)
    255
      0:                      OK (0.56s)
      2:                      OK (0.39s)
      4:                      OK
      20:                     OK (0.02s)
      100:                    OK (0.11s)
    264
      Bool
        not.not:              OK
            ✓ not.not passed 100 tests.
        not(&&):              OK (0.06s)
            ✓ not(&&) passed 100 tests.
        not(||):              OK (0.05s)
            ✓ not(||) passed 100 tests.
        not(not(&&)):         OK (0.05s)
            ✓ not(not(&&)) passed 100 tests.
        not(not(||)):         OK (0.06s)
            ✓ not(not(||)) passed 100 tests.
      Int64
        neg.neg:              OK (0.06s)
            ✓ neg.neg passed 100 tests.
      Double
        neg.neg:              OK (0.09s)
            ✓ neg.neg passed 100 tests.
    287
      A:                      OK (0.18s)
      B:                      OK (0.20s)
      C:                      OK (0.23s)
    288:                      OK (0.04s)
    362
      A:                      OK (0.15s)
      B:                      OK (0.17s)
    issue364
      Int64
        A:                    OK (0.17s)
        B:                    OK (0.01s)
      Double
        A:                    OK (0.16s)
        B:                    OK (0.01s)
    407
      Float
        isNaN:                OK (0.04s)
        isInfinite:           OK (0.22s)
      Double
        isNaN:                OK (0.04s)
        isInfinite:           OK (0.22s)
    409
      Float
        A:                    OK (0.22s)
      Double
        A:                    OK (0.23s)
    436
      A:                      OK (0.14s)
      B:                      OK (0.12s)
    437:                      FAIL (expected)
      src/Data/Array/Accelerate/Test/NoFib/Issues/Issue437.hs:42:
      This test requires building with -fdebug(expected failure)
    439:                      OK (0.07s)

5 out of 615 tests failed (535.77s)

accelerate-llvm-ptx> Test suite nofib-llvm-ptx failed
Test suite failure for package accelerate-llvm-ptx-1.3.0.0
    nofib-llvm-ptx:  exited with: ExitFailure 1
Logs printed to console

